#!/bin/bash

# xprintidle gxmessage hibernate-script slock

# Copyright 2020, Taeseong Ryu <formeu2s@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANT-ABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License at <http://www.gnu.org/licenses/> for
# more details.



### description:
#
# the user running this script must have sudo access
# to the "hibernate" command without passwd
# "%wheel ALL=(ALL) NOPASSWD: /usr/bin/hibernate"
# change "wheel" to "users" if the user doesn't have wheel access
#



### TODO
#



set -u # avoid a undeclared variable
# set -x # for debugging
g_arg=( "$@" )
g_arg0="$0"
SCRIPT_VERSION=0.1.0
SCRIPT_PATH=$(realpath "$g_arg0")
SCRIPT_NAME="${SCRIPT_PATH##*/}"
# Fall back to xmessage if gxmessage isn't available
XMESSAGE=$(which gxmessage) || XMESSAGE=xmessage
# 1hr=3600000ms
SET_TIME=$(awk 'BEGIN {print 1.5 * 60 * 60 * 1000}')
# maximum 1 minute load average for hibernate
MAX_LOAD_AVG=3
# programs that should prohibit hibernate
PROHIBITS=( emerge genkernel )
CHECK_INTERVAL=60
TIME_OUT=30
#
# -f, --force
# Ignore errors and suspend anyway.
#
# -k, --kill
# Kill processes if needed, in order to suspend.
#
# -v<n>, --verbosity=<n>
# Change verbosity level
# (0 = errors only, 3 = verbose, 4 = debug)
#
# -n, --no-suspend
# Disables actually suspending the system.
# This is useful for testing
# the hibernate script itself.
#
# --dry-run
# Don't actually do anything.
#
COMMANDS="sudo hibernate && slock"
#
# error code
#
E_INVALID_OPTION=64



check_idle_time() {
    idle_time=$(xprintidle)
    if (( idle_time > SET_TIME )); then
        swith_on=1
    else
        swith_on=0
    fi
    return 0
}

check_load_avg() {
    # check the current 1 min load average
    load_avg=$(cat /proc/loadavg | cut -c 1)
    if (( load_avg < MAX_LOAD_AVG )); then
        ((low_load++))
    else
        low_load=0
    fi
    return 0
}

check_prohibits() {
    for p in ${PROHIBITS[@]}; do
        if (( $(ps -A | grep -c $p) )); then
            swith_on=0
            break
        fi
    done
    return 0
}

reset_variables() {
    low_load=0
    idle_time=0
    swith_on=0
    return 0
}

execute_commands() {
    $XMESSAGE -timeout $TIME_OUT \
              The system will hibernate in $TIME_OUT seconds, \
              press ESC to abort.
    if (( ! $? )); then
        eval "$COMMANDS"
    fi
    return 0
}

check_hibernate() {
    local low_load=0
    local idle_time=0
    local swith_on=0
    local load_avg=0
    local p
    # infinite loop for hibernate
    while true; do
        sleep $CHECK_INTERVAL
        check_idle_time
        if (( swith_on )); then
            check_load_avg
            if (( low_load > 2 )); then
                check_prohibits
                if (( swith_on )); then
                    reset_variables
                    execute_commands
                fi
            fi
        fi
    done
    return 0
}

test_hibernate () {
    SET_TIME=5
    CHECK_INTERVAL=5
    TIME_OUT=5
    COMMANDS="sudo hibernate -n"
    check_hibernate
    return 0
}

invalid_option() {
    printf "\n %s\e[1;38;5;124m %s\e[0m %s\n" \
           'There is no' \
           "'${g_arg[0]}'" \
           'option.'
    cat << HEREDOC

 Usage : auto-hibernate [option]

 Option: '' check hibernate
         -t test hibernate
         -e edit this script
         -v prints this script version
         -h prints this help

HEREDOC
exit $E_INVALID_OPTION
}

edit_this() {
    $EDITOR "$g_arg0"
    return 0
}

print_version() {
    printf '\n%s: %s\n\n' \
           "$SCRIPT_NAME" \
           "$SCRIPT_VERSION"
    return 0
}

help_usage() {
    cat << HEREDOC

Usage: auto-hibernate [option]

Options:
''             ) hibernate after pre-setting idle time
-t | --test    ) tests hibernate with --dry-run or -n
-e | --edit    ) edit this script
-v | --version ) prints this script version
-h | --help    ) prints this help

Exit Status:
Returns 0 unless an invalid option is supplied or an error occurs.

HEREDOC
    return 0
}



# set -x
case ${g_arg[0]:-} in
    ''             ) check_hibernate ;;
    -t | --test    ) test_hibernate  ;;
    -e | --edit    ) edit_this       ;;
    -v | --version ) print_version   ;;
    -h | --help    ) help_usage      ;;
    *              ) invalid_option  ;;
esac
# set +x
